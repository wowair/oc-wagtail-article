# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-02-11 13:00
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.wagtailcore.blocks
import wagtail.wagtailcore.fields
import wagtail.wagtailembeds.blocks
import wagtail.wagtailimages.blocks


class Migration(migrations.Migration):

    replaces = [(b'oc_article', '0001_initial'), (b'oc_article', '0002_category'), (b'oc_article', '0003_auto_20150626_1218'), (b'oc_article', '0004_auto_20150626_1227'), (b'oc_article', '0005_article_header_image'), (b'oc_article', '0006_auto_20150630_2352'), (b'oc_article', '0007_auto_20150701_1541'), (b'oc_article', '0008_auto_20150701_1609'), (b'oc_article', '0009_auto_20150702_0912'), (b'oc_article', '0010_auto_20150702_1152'), (b'oc_article', '0011_auto_20150702_1539'), (b'oc_article', '0012_auto_20150825_1610'), (b'oc_article', '0013_auto_20150910_1547'), (b'oc_article', '0014_auto_20150911_0943'), (b'oc_article', '0015_auto_20150911_1105'), (b'oc_article', '0016_auto_20150911_1119'), (b'oc_article', '0017_blockarticle_header_image'), (b'oc_article', '0018_auto_20151228_1645'), (b'oc_article', '0019_auto_20160210_1336')]

    initial = True

    dependencies = [
        ('taggit', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('wagtailimages', '0008_image_created_at_index'),
        ('wagtailimages', '0006_add_verbose_names'),
        ('wowair', '0047_merge'),
        ('wagtailcore', '0001_squashed_0016_change_page_url_path_to_text_field'),
    ]

    operations = [
        migrations.CreateModel(
            name='ArticlePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('date', models.DateField(blank=True, null=True)),
                ('body', wagtail.wagtailcore.fields.RichTextField(blank=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='BlockArticlePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('date', models.DateField(blank=True, null=True)),
                ('body', wagtail.wagtailcore.fields.StreamField([(b'image_block', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.StructBlock([(b'image', wagtail.wagtailimages.blocks.ImageChooserBlock(formats=[b'full-width', b'left', b'right'], required=True)), (b'caption', wagtail.wagtailcore.blocks.CharBlock(required=True)), (b'image_type', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(b'header_image', b'Header image'), (b'content_image', b'Content image')]))], icon=b''))), (b'paragraph', wagtail.wagtailcore.blocks.RichTextBlock()), (b'blockquote', wagtail.wagtailcore.blocks.CharBlock(classname=b'full blockquote')), (b'fullimage', wagtail.wagtailimages.blocks.ImageChooserBlock()), (b'video_block', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.StructBlock([(b'video', wagtail.wagtailembeds.blocks.EmbedBlock(required=True)), (b'image', wagtail.wagtailimages.blocks.ImageChooserBlock(formats=[b'full-width', b'left', b'right'], required=True))], icon=b''))), (b'html', wagtail.wagtailcore.blocks.RawHTMLBlock(classname=b'full title'))])),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=255, verbose_name='Title')),
                ('slug', models.SlugField(blank=True, max_length=255, null=True, verbose_name='Slug')),
                ('color', models.CharField(max_length=255)),
            ],
        ),
        migrations.AlterModelOptions(
            name='category',
            options={'verbose_name': 'Category', 'verbose_name_plural': 'Categories'},
        ),
        migrations.AddField(
            model_name='articlepage',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='oc_article.Category'),
        ),
        migrations.AddField(
            model_name='blockarticlepage',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='oc_article.Category'),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='oc_article.ArticlePageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='blockarticlepage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='oc_article.BlockArticlePageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='excerpt',
            field=wagtail.wagtailcore.fields.RichTextField(blank=True, verbose_name='Excerpt'),
        ),
        migrations.AddField(
            model_name='blockarticlepage',
            name='excerpt',
            field=wagtail.wagtailcore.fields.RichTextField(blank=True, verbose_name='Excerpt'),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='header_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image'),
        ),
        migrations.CreateModel(
            name='ArticlePageTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='oc_article_articletag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='articlepage',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='blockarticlepage',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='BlockArticlePageTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='oc_article_blockarticlepagetag_taggeditems', to='oc_article.BlockArticlePage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='oc_article_blockarticletag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='articlepagetag',
            name='content_object',
            field=modelcluster.fields.ParentalKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='oc_article_articlepagetag_taggeditems', to='oc_article.ArticlePage'),
        ),
        migrations.AlterField(
            model_name='blockarticlepage',
            name='body',
            field=wagtail.wagtailcore.fields.StreamField([(b'image_block', wagtail.wagtailcore.blocks.StructBlock([(b'images', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.StructBlock([(b'image', wagtail.wagtailimages.blocks.ImageChooserBlock(formats=[b'full-width', b'left', b'right'], required=True)), (b'caption', wagtail.wagtailcore.blocks.CharBlock(required=True)), (b'image_type', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(b'header_image', b'Header image'), (b'content_image', b'Content image')]))]))), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock())])), (b'paragraph_block', wagtail.wagtailcore.blocks.StructBlock([(b'paragraph', wagtail.wagtailcore.blocks.RichTextBlock()), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock())])), (b'blockquote_block', wagtail.wagtailcore.blocks.StructBlock([(b'blockquote', wagtail.wagtailcore.blocks.CharBlock(classname=b'full blockquote')), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock())])), (b'html', wagtail.wagtailcore.blocks.RawHTMLBlock()), (b'embed', wagtail.wagtailembeds.blocks.EmbedBlock())]),
        ),
        migrations.AlterField(
            model_name='blockarticlepage',
            name='body',
            field=wagtail.wagtailcore.fields.StreamField([(b'image_block', wagtail.wagtailcore.blocks.StructBlock([(b'images', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.StructBlock([(b'image', wagtail.wagtailimages.blocks.ImageChooserBlock(formats=[b'full-width', b'left', b'right'], required=True)), (b'caption', wagtail.wagtailcore.blocks.CharBlock(required=False)), (b'image_type', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(b'header_image', b'Header image'), (b'content_image', b'Content image')]))]))), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock(required=False))], icon=b'image')), (b'paragraph_block', wagtail.wagtailcore.blocks.StructBlock([(b'paragraph', wagtail.wagtailcore.blocks.RichTextBlock()), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock(required=False))], icon=b'bold')), (b'blockquote_block', wagtail.wagtailcore.blocks.StructBlock([(b'blockquote', wagtail.wagtailcore.blocks.CharBlock(classname=b'full blockquote')), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock(required=False))], icon=b'openquote')), (b'html', wagtail.wagtailcore.blocks.RawHTMLBlock()), (b'embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon=b'media')), (b'table_block', wagtail.wagtailcore.blocks.StructBlock([(b'table', wagtail.wagtailcore.blocks.TextBlock(help_text='Enter your table as comma separated values, one line for each row.', rows=10)), (b'caption', wagtail.wagtailcore.blocks.CharBlock()), (b'header_row', wagtail.wagtailcore.blocks.BooleanBlock(help_text='Render first row as header if checked', required=False)), (b'header_column', wagtail.wagtailcore.blocks.BooleanBlock(help_text='Render first column as header if checked', required=False)), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock())]))]),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='subtitle',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='blockarticlepage',
            name='subtitle',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='styles_override',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='blockarticlepage',
            name='styles_override',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='blockarticlepage',
            name='body',
            field=wagtail.wagtailcore.fields.StreamField([(b'image_block', wagtail.wagtailcore.blocks.StructBlock([(b'images', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.StructBlock([(b'image', wagtail.wagtailimages.blocks.ImageChooserBlock(formats=[b'full-width', b'left', b'right'], required=True)), (b'caption', wagtail.wagtailcore.blocks.CharBlock(required=False)), (b'image_type', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(b'header_image', b'Header image'), (b'content_image', b'Content image'), (b'full_width_content_image', b'Full width content image')]))]))), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock(required=False))], icon=b'image')), (b'paragraph_block', wagtail.wagtailcore.blocks.StructBlock([(b'paragraph', wagtail.wagtailcore.blocks.RichTextBlock()), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock(required=False))], icon=b'bold')), (b'blockquote_block', wagtail.wagtailcore.blocks.StructBlock([(b'blockquote', wagtail.wagtailcore.blocks.CharBlock(classname=b'full blockquote')), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock(required=False))], icon=b'openquote')), (b'html', wagtail.wagtailcore.blocks.RawHTMLBlock()), (b'embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon=b'media')), (b'table_block', wagtail.wagtailcore.blocks.StructBlock([(b'table', wagtail.wagtailcore.blocks.TextBlock(help_text='Enter your table as comma separated values, one line for each row.', rows=10)), (b'caption', wagtail.wagtailcore.blocks.CharBlock()), (b'header_row', wagtail.wagtailcore.blocks.BooleanBlock(help_text='Render first row as header if checked', required=False)), (b'header_column', wagtail.wagtailcore.blocks.BooleanBlock(help_text='Render first column as header if checked', required=False)), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock(required=False))]))]),
        ),
        migrations.AlterField(
            model_name='blockarticlepage',
            name='body',
            field=wagtail.wagtailcore.fields.StreamField([(b'image_block', wagtail.wagtailcore.blocks.StructBlock([(b'images', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.StructBlock([(b'image', wagtail.wagtailimages.blocks.ImageChooserBlock(formats=[b'full-width', b'left', b'right'], required=True)), (b'caption', wagtail.wagtailcore.blocks.CharBlock(required=False)), (b'image_type', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(b'header_image', b'Header image'), (b'content_image', b'Content image'), (b'full_width_content_image', b'Full width content image')]))]))), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock(required=False))])), (b'paragraph_block', wagtail.wagtailcore.blocks.StructBlock([(b'paragraph', wagtail.wagtailcore.blocks.RichTextBlock()), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock(required=False))], icon=b'bold')), (b'blockquote_block', wagtail.wagtailcore.blocks.StructBlock([(b'blockquote', wagtail.wagtailcore.blocks.CharBlock(classname=b'full blockquote')), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock(required=False))], icon=b'openquote')), (b'html', wagtail.wagtailcore.blocks.RawHTMLBlock()), (b'embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon=b'media')), (b'table_block', wagtail.wagtailcore.blocks.StructBlock([(b'table', wagtail.wagtailcore.blocks.TextBlock(help_text='Enter your table as comma separated values, one line for each row.', rows=10)), (b'caption', wagtail.wagtailcore.blocks.CharBlock()), (b'header_row', wagtail.wagtailcore.blocks.BooleanBlock(help_text='Render first row as header if checked', required=False)), (b'header_column', wagtail.wagtailcore.blocks.BooleanBlock(help_text='Render first column as header if checked', required=False)), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock(required=False))]))]),
        ),
        migrations.AlterField(
            model_name='blockarticlepage',
            name='body',
            field=wagtail.wagtailcore.fields.StreamField([(b'image_block', wagtail.wagtailcore.blocks.StructBlock([(b'images', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.StructBlock([(b'image', wagtail.wagtailimages.blocks.ImageChooserBlock(formats=[b'full-width', b'left', b'right'], required=True)), (b'caption', wagtail.wagtailcore.blocks.CharBlock(required=False)), (b'image_type', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(b'header_image', b'Header image'), (b'content_image', b'Content image'), (b'full_width_content_image', b'Full width content image')]))]))), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock(required=False))])), (b'paragraph_block', wagtail.wagtailcore.blocks.StructBlock([(b'paragraph', wagtail.wagtailcore.blocks.RichTextBlock()), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock(required=False))])), (b'blockquote_block', wagtail.wagtailcore.blocks.StructBlock([(b'blockquote', wagtail.wagtailcore.blocks.CharBlock(classname=b'full blockquote')), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock(required=False))])), (b'html', wagtail.wagtailcore.blocks.RawHTMLBlock()), (b'embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon=b'media')), (b'table_block', wagtail.wagtailcore.blocks.StructBlock([(b'table', wagtail.wagtailcore.blocks.TextBlock(help_text='Enter your table as comma separated values, one line for each row.', rows=10)), (b'caption', wagtail.wagtailcore.blocks.CharBlock()), (b'header_row', wagtail.wagtailcore.blocks.BooleanBlock(help_text='Render first row as header if checked', required=False)), (b'header_column', wagtail.wagtailcore.blocks.BooleanBlock(help_text='Render first column as header if checked', required=False)), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock(required=False))]))]),
        ),
        migrations.AddField(
            model_name='blockarticlepage',
            name='header_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image'),
        ),
        migrations.AlterField(
            model_name='blockarticlepage',
            name='body',
            field=wagtail.wagtailcore.fields.StreamField([(b'image_block', wagtail.wagtailcore.blocks.StructBlock([(b'images', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.StructBlock([(b'image', wagtail.wagtailimages.blocks.ImageChooserBlock(formats=[b'full-width', b'left', b'right'], required=True)), (b'caption', wagtail.wagtailcore.blocks.CharBlock(required=False)), (b'alternative', wagtail.wagtailcore.blocks.CharBlock(help_text='Alternative (alt) text if image not displayed in html', required=False)), (b'image_type', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(b'header_image', b'Header image'), (b'content_image', b'Content image'), (b'full_width_content_image', b'Full width content image')]))]))), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock(required=False))])), (b'paragraph_block', wagtail.wagtailcore.blocks.StructBlock([(b'paragraph', wagtail.wagtailcore.blocks.RichTextBlock()), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock(required=False))])), (b'blockquote_block', wagtail.wagtailcore.blocks.StructBlock([(b'blockquote', wagtail.wagtailcore.blocks.CharBlock(classname=b'full blockquote')), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock(required=False))])), (b'html', wagtail.wagtailcore.blocks.RawHTMLBlock()), (b'embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon=b'media')), (b'table_block', wagtail.wagtailcore.blocks.StructBlock([(b'table', wagtail.wagtailcore.blocks.TextBlock(help_text='Enter your table as comma separated values, one line for each row.', rows=10)), (b'caption', wagtail.wagtailcore.blocks.CharBlock()), (b'header_row', wagtail.wagtailcore.blocks.BooleanBlock(help_text='Render first row as header if checked', required=False)), (b'header_column', wagtail.wagtailcore.blocks.BooleanBlock(help_text='Render first column as header if checked', required=False)), (b'block_classes', wagtail.wagtailcore.blocks.CharBlock(required=False))]))]),
        ),
    ]
